#BlueJ class context
comment0.target=Inventory
comment0.text=\r\n\ <h1\ style\="color\:\ rgb(21,\ 52,\ 80);\ background-color\:\ rgb(143,\ 188,\ 219);\ text-align\:center;">Inventory\ Class\ (Inventory\ Widget)</h1>\r\n\ \r\n\ <p>\r\n\ The\ <b>Inventory</b>\ is\ a\ Greenfoot\ Actor\ that\ can\ store\ a\ variable\ amount\ of\ items.\r\n\ <ul>\r\n\ \ \ \ \ \ <li>It\ is\ extremely\ customizable,\ with\ various\ constructors,\ taking\ in\ a\ multitude\ of\ different\ parameters</li>\r\n\ \ \ \ \ \ <li>It\ has\ the\ purpose\ of\ creating\ a\ single,\ or\ multiple\ inventories,\ depending\ on\ how\ the\ user\ would\ like\ to\ use\ it</li>\r\n\ \ \ \ \ \ <li>When\ a\ new\ item\ is\ added,\ the\ item's\ picture\ will\ be\ added\ into\ an\ empty\ slot</li>\r\n\ \ \ \ \ \ <li>If\ the\ same\ item\ is\ added\ again,\ it\ will\ update\ the\ number\ at\ the\ bottom\ of\ the\ slot\ by\ the\ appropriate\ number</li>\r\n\ \ \ \ \ \ <li>However,\ if\ the\ slot\ is\ full,\ the\ item\ will\ not\ be\ added</li>\r\n\ \ \ \ \ \ <li>Through\ keyboard\ interactions,\ the\ user\ can\ also\ select\ slots\ and\ choose\ to\ either\ drop\ 1\ count\ of\ the\ item,\ or\ drop\ all\ of\ that\ item</li>\r\n\ \ \ \ \ \ <li>When\ these\ events\ take\ place,\ the\ inventory\ will\ be\ updated\ accordingly</li>\r\n\ \ \ \ \ \ <li>Other\ classes\ can\ call\ its\ methods\ under\ different\ circumstances,\ allowing\ for\ many\ different\ possible\ uses</li>\r\n\ </ul>\r\n\ </p>\r\n\ \r\n\ <h4>Methods\:</h4>\r\n\ <ul>\r\n\ \ \ \ \ \ <li>update()\:\ The\ first\ update()\ method\ draws\ the\ inventory\ at\ its\ current\ state</li>\r\n\ \ \ \ \ \ <li>update()\:\ The\ second\ update()\ method\ can\ be\ used\ to\ change\ the\ transparency\ of\ the\ inventory</li>\r\n\ \ \ \ \ \ <li>update()\:\ The\ third\ update()\ method\ tracks\ how\ many\ of\ each\ item\ there\ are\ in\ an\ inventory</li>\r\n\ \ \ \ \ \ <li>update()\:\ The\ fourth\ update()\ method\ changes\ the\ colours\ of\ the\ inventory</li>\r\n\ \ \ \ \ \ <li>dropOne()\:\ Drops\ one\ count\ of\ the\ current\ selected\ item\ in\ the\ inventory,\ if\ any</li>\r\n\ \ \ \ \ \ <li>dropAll()\:\ Drops\ all\ of\ the\ current\ selected\ item\ in\ the\ inventory,\ if\ any</li>\r\n\ \ \ \ \ \ <li>checkFull()\:\ Checks\ if\ a\ certain\ inventory\ slot\ is\ full</li>\r\n\ \ \ \ \ \ <li>getNumberOfItems()\:\ Returns\ the\ number\ of\ slots\ the\ inventory\ is\ displaying</li>\r\n\ \ \ \ \ \ <li>setSelectIndex()\:\ Sets\ the\ select\ index,\ the\ slot\ that\ is\ currently\ selected</li>\r\n\ \ \ \ \ \ <li>getSelectIndex()\:\ Returns\ an\ integer\ for\ the\ select\ index,\ the\ slot\ that\ is\ currently\ selected\ (<b>NOTE\:</b>\ Starts\ at\ 0)</li>\r\n\ \ \ \ \ \ <li>getIsFull()\:\ Returns\ a\ boolean\ for\ whether\ or\ not\ the\ inventory\ is\ currently\ full\ in\ terms\ of\ slots</li>\r\n\ \ \ \ \ \ <li>getClasses()\:\ Returns\ an\ ArrayList\ for\ the\ classes\ that\ are\ currently\ in\ the\ inventory\ in\ order</li>\r\n\ \ \ \ \ \ <li>getNumbers()\:\ Returns\ an\ array\ holding\ the\ number\ of\ items\ in\ each\ slot</li>\r\n\ </ul>\r\n\ \r\n\ <h4>How\ To\ Use\:</h4>\r\n\ <ol>\r\n\ \ \ \ \ \ <li>Initialize\ an\ Inventory\ Greenfoot\ Actor\ (See\ constructors)</li>\r\n\ \ \ \ \ \ <li>Add\ the\ Actor\ to\ your\ World</li>\r\n\ \ \ \ \ \ <li>Make\ sure\ you\ have\ an\ Actor\ for\ the\ player\ (In\ this\ case,\ Trainer)</li>\r\n\ \ \ \ \ \ <li>Make\ sure\ you\ have\ an\ Actor(s)\ for\ items\ (In\ this\ case,\ Bow,\ Cake,\ etc.)</li>\r\n\ \ \ \ \ \ <li>Inside\ the\ player\ Actor,\ check\ for\ collision\ with\ the\ item\ Actor(s)</li>\r\n\ \ \ \ \ \ <li>If\ there\ is\ a\ collision\ with\ an\ item\:</li>\r\n\ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ <li>Pass\ the\ class\ of\ the\ item\ into\ the\ checkFull(class\ ObjectClass)\ method,\ returning\ a\ boolean,\ to\ check\ if\ the\ inventory\ is\ full\ of\ that\ item.\ In\ the\ attached\ demonstration,\ nothing\ happens\ if\ it\ is\ full</li>\r\n\ \ \ \ \ \ \ \ \ \ <li>Next,\ check\ if\ the\ inventory's\ slots\ are\ currently\ full\ using\ getIsFull(),\ which\ returns\ a\ boolean</li>\r\n\ \ \ \ \ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>If\ it\ is,\ check\ if\ the\ inventory\ currently\ contains\ the\ item's\ class,\ using\ getClasses().contains(Class\ objectClass)\ which\ returns\ a\ boolean</li>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>If\ true\ is\ returned,\ use\ update(Class\ objectClass,\ GreenfootImage\ image,\ int\ number)\ to\ add\ the\ item's\ class,\ image,\ and\ number\ of\ items\ into\ the\ inventory</li>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>Remove\ the\ item\ from\ the\ world</li>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ </ul>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <li>If\ the\ inventory's\ slots\ are\ not\ full,\ use\ update(Class\ objectClass,\ GreenfootImage\ image,\ int\ number)\ to\ add\ the\ item's\ class,\ image,\ and\ number\ of\ items\ into\ the\ inventory\ and\ remove\ the\ item\ from\ the\ world</li>\r\n\ \ \ \ \ \ \ \ \ \ </ul>\r\n\ \ \ \ \ \ \ \ \ \ <li><b>NOTE\:</b>\ Each\ of\ these\ situations\ can\ be\ modified,\ depending\ on\ the\ game\ functions</li>\r\n\ \ \ \ \ \ </ul>\r\n\ \ \ \ \ \ <li>Determine\ which\ keys\ will\ be\ used\ to\ select\ slots\ (In\ the\ example\ demonstration,\ 1\ is\ the\ first\ slot,\ 2\ is\ the\ second\ slot...\ 0\ is\ the\ tenth\ slot)</li>\r\n\ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ <li><b>NOTE\:</b>\ You\ may\ add\ as\ many\ slots\ as\ you\ wish,\ as\ long\ as\ keys\ are\ allocated\ for\ the\ selection\ of\ the\ slots</li>\r\n\ \ \ \ \ \ </ul>\r\n\ \ \ \ \ \ <li>Determine\ which\ key\ will\ be\ used\ to\ drop\ 1\ count\ of\ the\ currently\ selected\ slot\ (In\ the\ example\ demonstration,\ it\ is\ "p")</li>\r\n\ \ \ \ \ \ <li>Determine\ which\ key\ will\ be\ used\ to\ drop\ all\ of\ the\ currently\ selected\ slot\ (In\ the\ example\ demonstration,\ it\ is\ "o")</li>\r\n\ \ \ \ \ \ <li>When\ the\ drop\ keys\ are\ pressed\ check\ for\ these\ 3\ conditions</li>\r\n\ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ <li>Use\ getSelectIndex()\ to\ return\ the\ current\ selected\ slot,\ make\ sure\ it\ is\ not\ -1\ (-1\ means\ nothing\ is\ selected)</li>\r\n\ \ \ \ \ \ \ \ \ \ <li>Make\ sure\ getSelectIndex()\ returns\ a\ value\ less\ than\ getClasses().size()</li>\r\n\ \ \ \ \ \ \ \ \ \ <li>Use\ getClasses().isEmpty()\ to\ make\ sure\ the\ ArrayList\ containing\ the\ classes\ is\ not\ empty</li>\r\n\ \ \ \ \ \ \ \ \ \ <li><b>NOTE\:</b>\ The\ specifics\ for\ these\ conditions\ may\ change\ depending\ on\ how\ your\ game\ uses\ its\ inventory</li>\r\n\ \ \ \ \ \ \ \ \ \ <li><b>NOTE\:</b>\ These\ 3\ conditions\ are\ checked\ within\ the\ drop\ methods,\ however,\ checking\ them\ outside\ of\ the\ inventory\ class\ will\ allow\ you\ to\ know\ if\ you\ should\ find\ which\ item\ will\ be\ dropped,\ in\ order\ to\ add\ it\ back\ to\ your\ world</li>\r\n\ \ \ \ \ \ </ul>\r\n\ \ \ \ \ \ <li>When\ an\ object\ is\ removed,\ the\ programmer\ has\ two\ choices\:</li>\r\n\ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ <li>"Destroy"\ the\ object,\ by\ not\ re-adding\ it\ into\ the\ World</li>\r\n\ \ \ \ \ \ \ \ \ \ <li>Determine\ which\ object\ it\ was\ by\ calling\ getClasses().get(inventory.getSelectIndex())\ to\ find\ the\ class\ of\ the\ dropped\ item\ and\ re-add\ it\ into\ the\ World\ at\ a\ certain\ location</li>\r\n\ \ \ \ \ \ \ \ \ \ <li><b>NOTE\:</b>\ Re-add\ the\ item\ away\ from\ the\ player,\ otherwise,\ it\ will\ likely\ be\ instantly\ picked\ up\ unless\ extra\ conditions\ are\ set\ on\ the\ item</li>\r\n\ \ \ \ \ \ </ul>\r\n\ \ \ \ \ \ <li>update()\ can\ be\ used\ at\ any\ time\ to\ update\ the\ inventory's\ graphics\ if\ any\ graphics\ need\ to\ be\ changed</li>\r\n\ \ \ \ \ \ <li>update(int\ transparency)\ can\ be\ used\ to\ change\ the\ transparency\ of\ the\ inventory</li>\r\n\ \ \ \ \ \ <li>update(int\ backgroundR,\ int\ backgroundG,\ int\ backgroundB,\ int\ outlineR,\ int\ outlineG,\ int\ outlineB,\ int\ selectR,\ int\ selectG,\ int\ selectB,\ int\ numberColorR,\ int\ numberColorG,\ int\ numberColorB)\ can\ be\ used\ to\ change\ the\ colours\ of\ the\ inventory</li>\r\n\ \ \ \ \ \ <li>With\ the\ basics\ set\ up,\ the\ Inventory\ can\ then\ be\ further\ modified\ to\ suit\ any\ addition\ in-game\ functions\!</li>\r\n\ </ol>\r\n\ \r\n\ <h4>Possible\ Uses\:</h4>\r\n\ <ul>\r\n\ \ \ \ \ \ <li>Scavenger\ hunt\ type\ game,\ where\ the\ player\ has\ to\ find\ a\ certain\ number\ of\ items</li>\r\n\ \ \ \ \ \ <li>Pokemon\ style\ game,\ where\ the\ player\ goes\ around\ a\ map,\ finding\ items\ to\ advance\ in\ the\ game</li>\r\n\ \ \ \ \ \ <li>Sandbox\ game,\ where\ the\ player\ can\ amass\ items\ and\ use\ them\ in\ certain\ situations</li>\r\n\ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ <li>You\ can\ call\ methods\ to\ determine\ what\ the\ user\ is\ currently\ selecting,\ allowing\ you\ to\ have\ the\ user's\ avatar\ hold\ an\ object,\ like\ in\ Minecraft</li>\r\n\ \ \ \ \ \ <li>The\ class\ can\ further\ be\ specified\ for\ certain\ games,\ allowing\ for\ more\ game-specific\ interactions</li>\r\n\ \ \ \ \ \ <ul>\r\n\ \ \ \ \ \ \ \ \ \ <li>Allow\ players\ to\ "use\ up"\ certain\ items</li>\r\n\ \ \ \ \ \ \ \ \ \ <li>Have\ the\ max\ number\ of\ items\ a\ slot\ can\ hold\ be\ different\ for\ different\ items\ (i.e.\ 1\ sword\ takes\ up\ an\ entire\ slot)</li>\r\n\ \ \ \ \ \ </ul>\r\n\ </ul>\r\n\ \r\n\ <h4>Next\ Steps\:</h4>\r\n\ <ul>\r\n\ \ \ \ \ \ <li><b>Implemented\ in\ 1.2\!</b>\ Add\ a\ scaling\ feature\ to\ scale\ the\ image\ if\ they\ are\ too\ big\ or\ too\ small</li>\r\n\ \ \ \ \ \ <li><b>Implemented\ in\ 1.4\!</b>\ Add\ drop\ feature</li>\r\n\ \ \ \ \ \ <li><b>Implemented\ in\ 1.3\!</b>\ Allow\ users\ to\ specify\ max\ number\ of\ item\ types\ to\ be\ lower\ than\ the\ total\ number\ of\ items</li>\r\n\ \ \ \ \ \ <li><b>Implemented\ in\ 1.3\!</b>\ Add\ a\ transparency\ feature\ for\ other\ classes\ to\ change\ the\ transparency\ of\ the\ inventory</li>\r\n\ \ \ \ \ \ <li>Add\ a\ sound\ effect\ feature,\ where\ the\ programmer\ can\ input\ a\ sound\ file\ to\ be\ played\ every\ time\ an\ object\ is\ picked\ up</li>\r\n\ </ul>\r\n\ \r\n\ @author\ <b>Andrew\ Qiao</b>\r\n\ @version\ <b>1.4</b>\r\n
comment1.params=
comment1.target=Inventory()
comment1.text=\r\n\ Creates\ a\ default\ inventory.\ Not\ customizable,\ also\ requires\ the\ image\ size\ to\ be\ 30\ pixels,\ therefore\ not\ very\ practical\ as\ well.\r\n
comment10.params=
comment10.target=void\ dropOne()
comment10.text=\r\n\ Drops\ 1\ count\ of\ the\ item\ in\ the\ currently\ selected\ slot,\ and\ updates\ the\ inventory\ accordingly.\r\n\ If\ there\ is\ is\ only\ 1\ item,\ it\ calls\ dropAll()\ instead.\r\n
comment11.params=
comment11.target=void\ dropAll()
comment11.text=\r\n\ Drops\ all\ of\ the\ items\ in\ the\ currently\ selected\ slot.\r\n\ This\ includes\ removing\ the\ class\ from\ its\ ArrayList,\ image\ from\ its\ ArrayList,\ and\ moving\ values\ in\ the\ numbers\ array\ into\ their\ new\ positions.\r\n\ Finishes\ by\ updating\ the\ inventory.\r\n
comment12.params=objectClass
comment12.target=boolean\ checkFull(java.lang.Class)
comment12.text=\r\n\ Checks\ if\ the\ inventory\ is\ full\ of\ a\ certain\ item,\ returning\ true\ or\ false\ accordingly.\r\n\ \r\n\ @param\ objectClass\ \ \ \ \ \ \ The\ class\ the\ object\ that\ was\ picked\ up\ belongs\ to\r\n\ @return\ boolean\ \ \ \ \ \ \ \ \ \ True\ if\ the\ inventory\ is\ full\ of\ that\ item,\ false\ if\ not.\r\n
comment13.params=
comment13.target=int\ getNumberOfItems()
comment13.text=\r\n\ Returns\ the\ number\ of\ items\ the\ inventory\ can\ hold,\ as\ specified\ by\ the\ user.\r\n\ \r\n\ @return\ int\ \ \ \ \ \ \ \ The\ number\ of\ items\ the\ inventory\ can\ hold\r\n
comment14.params=selectIndex
comment14.target=void\ setSelectIndex(int)
comment14.text=\r\n\ Sets\ the\ currently\ selected\ slot\ within\ the\ inventory,\ within\ the\ possible\ range.\r\n\ \r\n\ @param\ selectIndex\ \ \ \ \ \ \ The\ index\ of\ the\ slot\ to\ be\ selected\r\n
comment15.params=
comment15.target=int\ getSelectIndex()
comment15.text=\r\n\ Returns\ the\ currently\ selected\ slot\ index.\r\n\ \r\n\ @return\ int\ \ \ \ \ \ Index\ of\ the\ slot\ that\ is\ currently\ selected\r\n
comment16.params=
comment16.target=boolean\ getIsFull()
comment16.text=\r\n\ Returns\ whether\ or\ not\ the\ inventory\ is\ full\ in\ terms\ of\ slots.\r\n\ \r\n\ @return\ boolean\ \ \ \ \ \ True\ if\ the\ inventory\ is\ full,\ false\ if\ not\r\n
comment17.params=
comment17.target=java.util.ArrayList\ getClasses()
comment17.text=\r\n\ Returns\ an\ ArrayList\ of\ the\ classes\ currently\ in\ the\ inventory\ in\ order.\r\n\ \r\n\ @return\ ArrayList<Class>\ \ \ \ \ ArrayList\ of\ classes\ currently\ in\ the\ inventory\ in\ order\r\n
comment18.params=
comment18.target=int[]\ getNumbers()
comment18.text=\r\n\ Returns\ an\ array\ of\ the\ number\ of\ items\ currently\ in\ each\ slot\ of\ the\ inventory.\r\n\ \r\n\ @return\ int[]\ \ \ \ \ \ \ \ Array\ of\ the\ number\ of\ items\ currently\ in\ the\ inventory\ in\ order\r\n
comment2.params=imageWidth\ imageHeight\ margin\ numberOfItems\ maxCount
comment2.target=Inventory(int,\ int,\ int,\ int,\ int)
comment2.text=\r\n\ Creates\ a\ slightly\ more\ customizable\ inventory,\ with\ image\ dimensions,\ margins,\ number\ of\ slots\ and\ the\ maximum\ of\ each\ item\ it\ can\ hold.\r\n\ \r\n\ @param\ imageWidth\ \ \ \ \ \ \ \ The\ width\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ imageHeight\ \ \ \ \ \ \ The\ height\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ margin\ \ \ \ \ \ \ \ \ \ \ \ The\ margin\ between\ the\ edge\ of\ the\ inventory\ and\ the\ image\ of\ the\ item\r\n\ @param\ numberOfItems\ \ \ \ \ The\ number\ of\ slots\ or\ items\ the\ inventory\ will\ hold\r\n\ @param\ maxCount\ \ \ \ \ \ \ \ \ \ The\ maximum\ number\ of\ each\ item\ the\ inventory\ can\ hold\r\n
comment3.params=imageWidth\ imageHeight\ margin\ numberOfItems\ maxCount\ scale\ transparency
comment3.target=Inventory(int,\ int,\ int,\ int,\ int,\ double,\ int)
comment3.text=\r\n\ Creates\ an\ even\ more\ customizable\ inventory,\ adds\ the\ scale\ and\ transparency.\r\n\ \r\n\ @param\ imageWidth\ \ \ \ \ \ \ \ The\ width\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ imageHeight\ \ \ \ \ \ \ The\ height\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ margin\ \ \ \ \ \ \ \ \ \ \ \ The\ margin\ between\ the\ edge\ of\ the\ inventory\ and\ the\ image\ of\ the\ item\r\n\ @param\ numberOfItems\ \ \ \ \ The\ number\ of\ slots\ or\ items\ the\ inventory\ will\ hold\r\n\ @param\ maxCount\ \ \ \ \ \ \ \ \ \ The\ maximum\ number\ of\ each\ item\ the\ inventory\ can\ hold\r\n\ @param\ scale\ \ \ \ \ \ \ \ \ \ \ \ \ The\ scale\ of\ images\ (0.5\ times,\ 2\ times,\ etc.)\r\n\ @param\ transparency\ \ \ \ \ \ The\ transparency\ of\ the\ inventory\r\n
comment4.params=imageWidth\ imageHeight\ margin\ numberOfItems\ maxCount\ backgroundR\ backgroundG\ backgroundB\ outlineR\ outlineG\ outlineB\ selectR\ selectG\ selectB\ numberColorR\ numberColorG\ numberColorB
comment4.target=Inventory(int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int)
comment4.text=\r\n\ Creates\ an\ inventory\ that\ can\ be\ customized\ with\ additional\ colors.\r\n\ \r\n\ @param\ imageWidth\ \ \ \ \ \ \ \ The\ width\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ imageHeight\ \ \ \ \ \ \ The\ height\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ margin\ \ \ \ \ \ \ \ \ \ \ \ The\ margin\ between\ the\ edge\ of\ the\ inventory\ and\ the\ image\ of\ the\ item\r\n\ @param\ numberOfItems\ \ \ \ \ The\ number\ of\ slots\ or\ items\ the\ inventory\ will\ hold\r\n\ @param\ maxCount\ \ \ \ \ \ \ \ \ \ The\ maximum\ number\ of\ each\ item\ the\ inventory\ can\ hold\r\n\ @param\ backgroundR\ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ backgroundG\ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ backgroundB\ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ outlineR\ \ \ \ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ outlineG\ \ \ \ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ outlineB\ \ \ \ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ selectR\ \ \ \ \ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ selectG\ \ \ \ \ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ selectB\ \ \ \ \ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ numberColorR\ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberColorG\ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberColorB\ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n
comment5.params=imageWidth\ imageHeight\ margin\ numberOfItems\ maxCount\ backgroundR\ backgroundG\ backgroundB\ outlineR\ outlineG\ outlineB\ selectR\ selectG\ selectB\ numberColorR\ numberColorG\ numberColorB\ numberFontName\ numberFontSize\ scale\ transparency
comment5.target=Inventory(int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ java.lang.String,\ int,\ double,\ int)
comment5.text=\r\n\ King\ of\ the\ inventory\ constructors,\ includes\ the\ selection\ of\ font\ name\ and\ size,\ making\ the\ inventory\ more\ visually\ appealing\ if\ needed.\r\n\ \r\n\ @param\ imageWidth\ \ \ \ \ \ \ \ The\ width\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ imageHeight\ \ \ \ \ \ \ The\ height\ of\ the\ images\ of\ items\ that\ will\ be\ displayed\r\n\ @param\ margin\ \ \ \ \ \ \ \ \ \ \ \ The\ margin\ between\ the\ edge\ of\ the\ inventory\ and\ the\ image\ of\ the\ item\r\n\ @param\ numberOfItems\ \ \ \ \ The\ number\ of\ slots\ or\ items\ the\ inventory\ will\ hold\r\n\ @param\ maxCount\ \ \ \ \ \ \ \ \ \ The\ maximum\ number\ of\ each\ item\ the\ inventory\ can\ hold\r\n\ @param\ backgroundR\ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ backgroundG\ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ backgroundB\ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ outlineR\ \ \ \ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ outlineG\ \ \ \ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ outlineB\ \ \ \ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ selectR\ \ \ \ \ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ selectG\ \ \ \ \ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ selectB\ \ \ \ \ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ numberColorR\ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberColorG\ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberColorB\ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberFontName\ \ \ \ The\ name\ of\ the\ font\ for\ the\ inventory\ numbers\r\n\ @param\ numberFontSize\ \ \ \ The\ size\ of\ the\ font\ for\ the\ inventory\ numbers\r\n\ @param\ scale\ \ \ \ \ \ \ \ \ \ \ \ \ The\ scale\ of\ images\ (0.5\ times,\ 2\ times,\ etc.)\r\n\ @param\ transparency\ \ \ \ \ \ The\ transparency\ of\ the\ inventory\r\n
comment6.params=
comment6.target=void\ update()
comment6.text=\r\n\ Updates\ the\ inventory\ by\ resetting\ the\ image,\ drawing\ the\ image\ boxes\ that\ will\ contain\ the\ individual\ item\ images,\ the\ item\ images,\ the\ selection\ box\ (if\ applicable),\ and\ number\ of\ items\ in\ each\ slot.\r\n\ It\ will\ also\ set\ the\ transparency\ of\ the\ image,\ and\ set\ it\ for\ display.\r\n
comment7.params=transparency
comment7.target=void\ update(int)
comment7.text=\r\n\ Used\ by\ other\ classes\ to\ change\ the\ transparency\ of\ the\ inventory\ only\ if\ it\ falls\ into\ an\ acceptable\ range\ (0-255\ inclusive).\r\n\ Then\ it\ calls\ update()\ to\ redraw\ everything.\r\n\ \r\n\ @param\ transparency\ \ \ \ \ \ \ The\ transparency\ of\ the\ inventory\r\n
comment8.params=objectClass\ image\ number
comment8.target=void\ update(java.lang.Class,\ greenfoot.GreenfootImage,\ int)
comment8.text=\r\n\ Updates\ the\ inventory\ classes\ ArrayList,\ images\ ArrayList,\ and\ number\ of\ items\ in\ each\ slot\ array,\ based\ on\ input\ from\ other\ classes.\r\n\ Then\ calls\ update()\ to\ display\ the\ new\ changes.\r\n\ \r\n\ @param\ objectClass\ \ \ \ \ \ \ The\ class\ the\ object\ that\ was\ picked\ up\ belongs\ to\r\n\ @param\ image\ \ \ \ \ \ \ \ \ \ \ \ \ The\ image\ of\ the\ object\ that\ was\ picked\ up\r\n\ @param\ number\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ objects\ that\ were\ picked\ up\r\n
comment9.params=backgroundR\ backgroundG\ backgroundB\ outlineR\ outlineG\ outlineB\ selectR\ selectG\ selectB\ numberColorR\ numberColorG\ numberColorB
comment9.target=void\ update(int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ int)
comment9.text=\r\n\ Allows\ other\ classes\ to\ change\ the\ colours\ of\ the\ background,\ outline,\ selectBox,\ and\ numbers.\ \r\n\ Then\ calls\ update()\ to\ redraw\ everything.\r\n\ \r\n\ @param\ backgroundR\ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ backgroundG\ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ backgroundB\ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ background\ color\r\n\ @param\ outlineR\ \ \ \ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ outlineG\ \ \ \ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ outlineB\ \ \ \ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ image\ outline\ color\r\n\ @param\ selectR\ \ \ \ \ \ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ selectG\ \ \ \ \ \ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ selectB\ \ \ \ \ \ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ select\ box\ color\r\n\ @param\ numberColorR\ \ \ \ \ \ The\ R\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberColorG\ \ \ \ \ \ The\ G\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n\ @param\ numberColorB\ \ \ \ \ \ The\ B\ value\ of\ the\ inventory's\ inventory\ number\ color\r\n
numComments=19
